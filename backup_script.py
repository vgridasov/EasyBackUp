#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏–∑ –¥–æ–º–∞—à–Ω–µ–π –ø–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç macOS, Linux –∏ Windows
"""

import os
import sys
import zipfile
import shutil
import platform
import psutil
from datetime import datetime
from pathlib import Path
import subprocess
from typing import List, Tuple, Optional

class BackupManager:
    def __init__(self):
        self.system = platform.system()
        self.home_dir = Path.home()
        self.username = os.getlogin()
        self.extensions = self._load_extensions()
        self.blacklist = self._load_blacklist()
        
    def _load_extensions(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open('file_extensions.txt', 'r', encoding='utf-8') as f:
                extensions = []
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and line.startswith('.'):
                        extensions.append(line.lower())
                return extensions
        except FileNotFoundError:
            print("‚ùå –§–∞–π–ª file_extensions.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return []
    
    def _load_blacklist(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open('blacklist.txt', 'r', encoding='utf-8') as f:
                blacklist = []
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#'):
                        blacklist.append(line.lower())
                return blacklist
        except FileNotFoundError:
            print("‚ö†Ô∏è  –§–∞–π–ª blacklist.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è")
            return []
    
    def _is_blacklisted(self, name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫–∞ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ"""
        name_lower = name.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        if name_lower in self.blacklist:
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–±–ª–æ–Ω—ã —Å wildcards
        for pattern in self.blacklist:
            if '*' in pattern:
                import fnmatch
                if fnmatch.fnmatch(name_lower, pattern):
                    return True
            elif name_lower.startswith(pattern.rstrip('*')):
                return True
                
        return False
    
    def find_files_to_backup(self) -> List[Path]:
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        files_to_backup = []
        print(f"üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤ {self.home_dir}...")
        
        try:
            for root, dirs, files in os.walk(self.home_dir):
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–∞–ø–∫–∏ —Å —É—á–µ—Ç–æ–º blacklist
                dirs[:] = [d for d in dirs if not self._is_blacklisted(d)]
                
                for file in files:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –Ω–∞ blacklist
                    if self._is_blacklisted(file):
                        continue
                        
                    file_path = Path(root) / file
                    if file_path.suffix.lower() in self.extensions:
                        files_to_backup.append(file_path)
                        
                if len(files_to_backup) % 1000 == 0 and len(files_to_backup) > 0:
                    print(f"   –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files_to_backup)}")
                    
        except PermissionError as e:
            print(f"‚ö†Ô∏è  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º –ø–∞–ø–∫–∞–º: {e}")
        
        return files_to_backup
    
    def calculate_total_size(self, files: List[Path]) -> int:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤"""
        total_size = 0
        print("üìä –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤...")
        
        for i, file_path in enumerate(files):
            try:
                total_size += file_path.stat().st_size
                if i % 500 == 0:
                    print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i}/{len(files)} —Ñ–∞–π–ª–æ–≤")
            except (OSError, FileNotFoundError):
                continue
                
        return total_size
    
    def format_size(self, size_bytes: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        for unit in ['–ë', '–ö–ë', '–ú–ë', '–ì–ë', '–¢–ë']:
            if size_bytes < 1024.0:
                return f"{size_bytes:.2f} {unit}"
            size_bytes /= 1024.0
        return f"{size_bytes:.2f} –ü–ë"
    
    def find_external_drives(self) -> List[Tuple[str, int, int]]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –≤–Ω–µ—à–Ω–∏–µ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–∏"""
        external_drives = []
        
        for partition in psutil.disk_partitions():
            if 'removable' in partition.opts or (self.system == "Darwin" and 
                                               '/Volumes/' in partition.mountpoint and 
                                               partition.mountpoint != '/'):
                try:
                    usage = psutil.disk_usage(partition.mountpoint)
                    external_drives.append((
                        partition.mountpoint,
                        usage.free,
                        usage.total
                    ))
                except PermissionError:
                    continue
                    
        return external_drives
    
    def select_compression_level(self) -> int:
        """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è"""
        print("\nüóúÔ∏è  –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Å–∂–∞—Ç–∏—è:")
        print("1. –ë—ã—Å—Ç—Ä—ã–π (–±–µ–∑ —Å–∂–∞—Ç–∏—è)")
        print("2. –û–±—ã—á–Ω—ã–π (—Å—Ä–µ–¥–Ω–∏–π)")
        print("3. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π (–º–µ–¥–ª–µ–Ω–Ω—ã–π, –Ω–æ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π)")
        
        while True:
            try:
                choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
                if choice == '1':
                    return zipfile.ZIP_STORED
                elif choice == '2':
                    return zipfile.ZIP_DEFLATED
                elif choice == '3':
                    return zipfile.ZIP_LZMA
                else:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3")
            except KeyboardInterrupt:
                print("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                sys.exit(1)
    
    def create_backup_filename(self, drive_path: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –∞—Ä—Ö–∏–≤–∞"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"backup_{self.username}_{timestamp}.zip"
        return os.path.join(drive_path, filename)
    
    def create_backup_archive(self, files: List[Path], output_path: str, 
                            compression: int) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –∞—Ä—Ö–∏–≤ —Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–µ–π"""
        print(f"\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞: {output_path}")
        
        try:
            with zipfile.ZipFile(output_path, 'w', compression=compression) as zipf:
                total_files = len(files)
                
                for i, file_path in enumerate(files):
                    try:
                        # –°–æ–∑–¥–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç –¥–æ–º–∞—à–Ω–µ–π –ø–∞–ø–∫–∏
                        relative_path = file_path.relative_to(self.home_dir)
                        zipf.write(file_path, relative_path)
                        
                        if i % 100 == 0:
                            progress = (i / total_files) * 100
                            print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}% ({i}/{total_files})")
                            
                    except (OSError, FileNotFoundError) as e:
                        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {file_path}: {e}")
                        continue
                    except KeyboardInterrupt:
                        print("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                        return False
                        
                print("‚úÖ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: {e}")
            return False
    
    def run_backup(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è EasyBackUp")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
        if not self.extensions:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤")
            return
        
        print(f"üìÅ –î–æ–º–∞—à–Ω—è—è –ø–∞–ø–∫–∞: {self.home_dir}")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.username}")
        print(f"üíæ –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {self.system}")
        print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π: {len(self.extensions)}")
        print(f"üö´ –ò—Å–∫–ª—é—á–µ–Ω–∏–π –≤ blacklist: {len(self.blacklist)}")
        
        # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        files_to_backup = self.find_files_to_backup()
        if not files_to_backup:
            print("‚ùå –§–∞–π–ª—ã –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files_to_backup)}")
        
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        total_size = self.calculate_total_size(files_to_backup)
        formatted_size = self.format_size(total_size)
        print(f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {formatted_size}")
        
        # –ü–æ–∏—Å–∫ –≤–Ω–µ—à–Ω–∏—Ö –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–µ–π
        external_drives = self.find_external_drives()
        if not external_drives:
            print("‚ùå –í–Ω–µ—à–Ω–∏–µ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        print("\nüíæ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤–Ω–µ—à–Ω–∏–µ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–∏:")
        for i, (path, free, total) in enumerate(external_drives, 1):
            free_formatted = self.format_size(free)
            total_formatted = self.format_size(total)
            print(f"   {i}. {path} (—Å–≤–æ–±–æ–¥–Ω–æ: {free_formatted} –∏–∑ {total_formatted})")
        
        # –í—ã–±–æ—Ä –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—è
        while True:
            try:
                choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å (1-{len(external_drives)}): ").strip()
                drive_idx = int(choice) - 1
                if 0 <= drive_idx < len(external_drives):
                    selected_drive, free_space, _ = external_drives[drive_idx]
                    break
                else:
                    print(f"‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(external_drives)}")
            except (ValueError, KeyboardInterrupt):
                print("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
        if free_space < total_size:
            print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–µ!")
            print(f"   –¢—Ä–µ–±—É–µ—Ç—Å—è: {self.format_size(total_size)}")
            print(f"   –î–æ—Å—Ç—É–ø–Ω–æ: {self.format_size(free_space)}")
            return
        
        print(f"‚úÖ –ú–µ—Å—Ç–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ (–¥–æ—Å—Ç—É–ø–Ω–æ: {self.format_size(free_space)})")
        
        # –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è —Å–∂–∞—Ç–∏—è
        compression = self.select_compression_level()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∞—Ä—Ö–∏–≤–∞
        backup_path = self.create_backup_filename(selected_drive)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        print(f"\nüìã –°–≤–æ–¥–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏:")
        print(f"   –§–∞–π–ª–æ–≤ –∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—é: {len(files_to_backup)}")
        print(f"   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {formatted_size}")
        print(f"   –ú–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {backup_path}")
        
        confirm = input("\n–ù–∞—á–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ? (y/N): ").strip().lower()
        if confirm not in ['y', 'yes', '–¥', '–¥–∞']:
            print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
        success = self.create_backup_archive(files_to_backup, backup_path, compression)
        
        if success:
            final_size = Path(backup_path).stat().st_size
            print(f"\nüéâ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìÅ –ê—Ä—Ö–∏–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {backup_path}")
            print(f"üìä –†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: {self.format_size(final_size)}")
            print(f"üìà –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è: {((total_size - final_size) / total_size * 100):.1f}%")
        else:
            print("\n‚ùå –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")

def main():
    try:
        backup_manager = BackupManager()
        backup_manager.run_backup()
    except KeyboardInterrupt:
        print("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
